# Generated by Django 5.0.4 on 2024-04-18 02:04

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DefaultCategorys',
            fields=[
                ('_id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Categoria padrão',
                'verbose_name_plural': 'Categorias padrão',
                'db_table': 'default_categorys',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UnityTypes',
            fields=[
                ('_id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25, unique=True)),
                ('abbreviation', models.CharField(max_length=5, unique=True)),
                ('factor', models.PositiveSmallIntegerField(verbose_name='Base de calculo')),
            ],
            options={
                'verbose_name': 'Tipo de unidade',
                'verbose_name_plural': 'Tipos de unidades',
                'db_table': 'unity_types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('_id', models.UUIDField(db_column='id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nickname', models.CharField(max_length=255, verbose_name='Apelido')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='E-mail')),
                ('password', models.CharField(max_length=255, verbose_name='Senha')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Data de aniversário')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['nickname'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('_id', models.UUIDField(db_column='id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Nome')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mercado do usuário',
                'verbose_name_plural': 'Mercados do usuário',
                'db_table': 'markets',
                'ordering': ['name'],
                'unique_together': {('name', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='ShoppingList',
            fields=[
                ('_id', models.UUIDField(db_column='id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('final_value', models.PositiveBigIntegerField(default=0, help_text='Sempre deve ser armazenado em formato inteiro!', verbose_name='Valor final')),
                ('unique_items', models.PositiveSmallIntegerField(default=0, verbose_name='Itens únicos')),
                ('total_items', models.PositiveSmallIntegerField(default=0, verbose_name='Total de itens')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Lista de compras do usuário',
                'verbose_name_plural': 'Listas de compras do usuário',
                'db_table': 'shopping_list',
                'ordering': ['name'],
                'unique_together': {('name', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='ShoppingLog',
            fields=[
                ('_id', models.UUIDField(db_column='id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buy_date', models.DateTimeField(auto_now_add=True, verbose_name='Data da compra')),
                ('market_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.market')),
                ('shopping_list_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.shoppinglist')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Histórico de compras do usuário',
                'verbose_name_plural': 'Históricos de compras do usuário',
                'db_table': 'shopping_log',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='DefaultProducts',
            fields=[
                ('_id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('image_url', models.URLField(blank=True, null=True, verbose_name='Image URL')),
                ('default_categorys_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.defaultcategorys')),
                ('unity_types_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.unitytypes')),
            ],
            options={
                'verbose_name': 'Produto padrão',
                'verbose_name_plural': 'Produtos padrão',
                'db_table': 'default_products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserCategorys',
            fields=[
                ('_id', models.UUIDField(db_column='id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Categoria do usuário',
                'verbose_name_plural': 'Categorias do usuário',
                'db_table': 'user_categorys',
                'ordering': ['name'],
                'unique_together': {('name', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='UserProducts',
            fields=[
                ('_id', models.UUIDField(db_column='id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('price', models.PositiveBigIntegerField(default=0, help_text='Sempre deve ser armazenado em formato inteiro!', verbose_name='Preço')),
                ('notes', models.CharField(blank=True, max_length=255, null=True)),
                ('barcode', models.CharField(blank=True, max_length=50, null=True)),
                ('image_url', models.URLField(blank=True, null=True, verbose_name='Image URL')),
                ('category_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.usercategorys')),
                ('price_unity_types_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_unity_types_id', to='lista_de_compras.unitytypes')),
                ('unity_types_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.unitytypes')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Produto do usuário',
                'verbose_name_plural': 'Produtos do usuário',
                'db_table': 'user_products',
                'ordering': ['name'],
                'unique_together': {('name', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='ProductList',
            fields=[
                ('_id', models.UUIDField(db_column='id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.PositiveSmallIntegerField(default=1, verbose_name='Quantidade')),
                ('price', models.PositiveBigIntegerField(default=0, help_text='Sempre deve ser armazenado em formato inteiro!', verbose_name='Preço')),
                ('total', models.PositiveBigIntegerField(default=0, help_text='Sempre deve ser armazenado em formato inteiro!', verbose_name='Total')),
                ('on_cart', models.BooleanField(default=False, verbose_name='No carrinho')),
                ('shopping_list_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.shoppinglist')),
                ('user_product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lista_de_compras.userproducts')),
            ],
            options={
                'verbose_name': 'Item da lista',
                'verbose_name_plural': 'Itens da lista',
                'db_table': 'product_list',
                'ordering': ['created_at'],
            },
        ),
    ]
